1. Does the Hero class need to know about the existence of the SuperHero class? (Hint: do a search in Hero.cpp, does the word “SuperHero” appear anywhere?)

No, the Hero clas does not need the existence of the SuperHero class because Hero "IS NOT A" SuperHero, it is the other way around. In this case, the SuperHero class is the dependent on the Hero class.

2. Does the SuperHero class need to know about the existence of the Hero class? (Hint: do a search in SuperHero.cpp, does the word “Hero” appear anywhere?)

While "Hero" cannot be seen in SuperHero.cpp file, it can be seen in SuperHero.h file. The SuperHero class is dependent on the Hero class' properties as well as some of the methods declared inside the Parent class. In this case, yes, the SuperHero class needs to know about the existence of the Hero class.

3. The program prints out “Ancient Battle!” when 2 Heroes fight. It prints out “Super Fight!” when 2 SuperHeroes fight. When you tried to make a Hero fight a SuperHero , what did it print out?

The program printed out "Superfight" because at this stage of the program, the * operator that is being used is the one from inside the Hero class, not the one from the SuperHero class.

4. True or False: are the following definitions for main valid?
int main() {
    Hero("Achilles", 20, 6) * Hero("Hector", 30, 5);
}
how about this?
int main() {
    (Hero("Achilles", 20, 6) * Hero("Hector", 30, 5)) * (Hero("Atalanta", 10, 3) * Hero("Hippolyta", 10, 2));
}

They would be vaid expressions. The moment that the constructor is called (given that the parameters are valid), the objects are created. The only thing that is different is the fact that the Heroes were not saved in a variable.